# -*- coding: utf-8 -*-
# Ïã§Ìñâ: streamlit run --server.port 3000 --server.address 0.0.0.0 streamlit_app.py

import datetime
from pathlib import Path

import numpy as np
import pandas as pd
import streamlit as st
import xarray as xr

# --- ÏïàÏ†ÑÌïú Matplotlib/Ìè∞Ìä∏ ÏÑ§Ï†ï ---
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import font_manager as fm, rcParams
from matplotlib.colors import TwoSlopeNorm
import matplotlib.patheffects as pe
import matplotlib.patches as patches

# --- CartopyÎäî ÌôòÍ≤ΩÏóê Îî∞Îùº ÏÑ§Ïπò Ïã§Ìå® Í∞ÄÎä• ‚Üí ÏòµÏÖîÎÑê Î°úÎî© ---
USE_CARTOPY = True
try:
    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
except Exception:
    USE_CARTOPY = False

# -------------------------------------------------
# Ï†ÑÏó≠ Ïä§ÌÉÄÏùº/Ìè∞Ìä∏
# -------------------------------------------------
def setup_font():
    """Pretendard ÏóÜÏúºÎ©¥ ÏÑúÎ≤Ñ Í∏∞Î≥∏ ÌïúÍ∏Ä Ìè∞Ìä∏ ÌõÑÎ≥¥Î°ú Ìè¥Î∞±."""
    font_path = Path(__file__).parent / "fonts" / "Pretendard-Bold.ttf"
    if font_path.exists():
        fm.fontManager.addfont(str(font_path))
        font_name = fm.FontProperties(fname=str(font_path)).get_name()
        rcParams["font.family"] = font_name
    else:
        # ÏÑúÎ≤Ñ/ÎèÑÏª§ÏóêÏÑú ÌùîÌïú ÌïúÍ∏Ä Ìè∞Ìä∏ ÌõÑÎ≥¥
        for cand in ["NanumGothic", "Noto Sans CJK KR", "AppleGothic"]:
            try:
                rcParams["font.family"] = cand
                break
            except Exception:
                pass
    rcParams["axes.unicode_minus"] = False
    rcParams["axes.spines.top"] = False
    rcParams["axes.spines.right"] = False
    rcParams["axes.grid"] = True
    rcParams["grid.alpha"] = 0.25

setup_font()
PE = [pe.withStroke(linewidth=2.5, foreground="white")]

st.set_page_config(page_title="Îú®Í±∞ÏõåÏßÄÎäî Î∞îÎã§: SST ÎåÄÏãúÎ≥¥Îìú", layout="wide", page_icon="üåä")

# -------------------------------------------------
# NOAA OISST v2 High-Res (0.25¬∞) ÏùºÏùº Îç∞Ïù¥ÌÑ∞ (Ïó∞ÎèÑÎ≥Ñ ÌååÏùº)
# -------------------------------------------------
BASE_URL = "https://psl.noaa.gov/thredds/dodsC/Datasets/noaa.oisst.v2.highres/sst.day.mean.{year}.nc"

# -------------------------------------------------
# Îç∞Ïù¥ÌÑ∞ Î°úÎçî: 'nearest + tolerance' + Ïó∞-Í≤ΩÍ≥Ñ/Ìè¥Î∞± ÌÉêÏÉâ + Ï∫êÏãú
# -------------------------------------------------
@st.cache_data(show_spinner=False, ttl=3600)
def load_sst(date: datetime.date, lat_range=(28, 42), lon_range=(120, 135)):
    """
    - ÏÑ†ÌÉù ÎÇ†ÏßúÍ∞Ä time indexÏóê Ï†ïÌôïÌûà ÏóÜÏùÑ Îïå Î∞úÏÉùÌïòÎäî
      "not all values found in index 'time' ..." Î¨∏Ï†úÏóê ÎåÄÏùë
    - 1) nearest + tolerance(3Ïùº) ‚Üí 2) 7Ïùº Î≤îÏúÑÏóêÏÑú Í≥ºÍ±∞Î°ú Ìè¥Î∞± ÌÉêÏÉâ
    - Ïó∞ÎèÑ Í≤ΩÍ≥Ñ ÏûêÎèô Ï≤òÎ¶¨
    - Î∞òÌôò: (DataArray, Ïã§Ï†úÏÇ¨Ïö©ÎÇ†Ïßúdate) ÎòêÎäî (None, None)
    """

    def _open_year(y: int):
        url = BASE_URL.format(year=y)
        # pydap ÎØ∏ÏÑ§Ïπò ÌôòÍ≤ΩÏù¥ ÎßéÏúºÎØÄÎ°ú Í∏∞Î≥∏ÏóîÏßÑ ‚Üí Ïã§Ìå® Ïãú pydap
        try:
            ds = xr.open_dataset(url)  # netCDF4/OPeNDAP ÏûêÎèô
        except Exception:
            ds = xr.open_dataset(url, engine="pydap")
        return ds.sortby("time")

    try:
        ds_main = _open_year(date.year)

        # 1) Í∞ÄÍπåÏö¥ ÎÇ†Ïßú ÏûêÎèô ÏÑ†ÌÉù (ÌóàÏö©Ïò§Ï∞® 3Ïùº)
        try:
            da = (
                ds_main["sst"]
                .sel(time=np.datetime64(date), method="nearest", tolerance=np.timedelta64(3, "D"))
                .sel(lat=slice(*lat_range), lon=slice(*lon_range))
                .squeeze()
            )
            da.load()
            if np.isfinite(da.values).any():
                used_date = pd.to_datetime(da["time"].item()).date()
                return da, used_date
        except Exception:
            pass

        # 2) Ïã§Ìå® Ïãú 7Ïùº ÎèôÏïà Í≥ºÍ±∞Î°ú ÌïòÎ£®Ïî© Î¨ºÎü¨ÎÇòÎ©∞ ÌÉêÏÉâ (Ïó∞ÎèÑ Í≤ΩÍ≥Ñ Ìè¨Ìï®)
        for back in range(1, 8):
            dt = date - datetime.timedelta(days=back)
            ds = ds_main if dt.year == date.year else _open_year(dt.year)
            try:
                da = (
                    ds["sst"]
                    .sel(time=np.datetime64(dt))  # Ï†ïÌôï ÏùºÏπò ÏãúÎèÑ
                    .sel(lat=slice(*lat_range), lon=slice(*lon_range))
                    .squeeze()
                )
                da.load()
                if np.isfinite(da.values).any():
                    used_date = pd.to_datetime(da["time"].item()).date()
                    return da, used_date
            except Exception:
                continue

        return None, None

    except Exception as e:
        st.error(f"Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: {e}")
        return None, None

# -------------------------------------------------
# ÌîåÎ°úÌåÖ (Cartopy ÏûàÏúºÎ©¥ ÏßÄÎèÑ Ìà¨ÏòÅ, ÏóÜÏúºÎ©¥ ÌèâÎ©¥ ÎåÄÏ≤¥)
# -------------------------------------------------
def plot_sst(da, date, extent=(120, 135, 28, 42)):
    # Í≥ÑÏ†à/ÎÇ†Ïßú Î≥ÄÌôîÏóê ÏïàÏ†ÑÌïú Ïª¨Îü¨ Ïä§ÏºÄÏùº
    arr = da.values
    if not np.isfinite(arr).any():
        raise ValueError("SST Í∞íÏù¥ Î™®Îëê NaNÏûÖÎãàÎã§.")

    vmin = float(np.nanpercentile(arr, 5))
    vmax = float(np.nanpercentile(arr, 95))
    # ÏãúÏù∏ÏÑ± Ï¢ãÏùÄ Ï§ëÏã¨Í∞í(Îî∞ÎúªÌïú Í≥ÑÏ†à Í∞ÄÏ§ë) ÎòêÎäî Ï§ëÍ∞ÑÍ∞í
    vcenter = min(max(29.0, vmin + (vmax - vmin) * 0.6), vmax - 0.1)
    norm = TwoSlopeNorm(vmin=vmin, vcenter=vcenter, vmax=vmax)

    if USE_CARTOPY:
        fig, ax = plt.subplots(figsize=(9, 6), subplot_kw={"projection": ccrs.PlateCarree()})
        ax.set_extent(extent, crs=ccrs.PlateCarree())
        im = da.plot.pcolormesh(
            ax=ax, x="lon", y="lat",
            transform=ccrs.PlateCarree(),
            cmap="YlOrRd", norm=norm, add_colorbar=False
        )
        ax.coastlines()
        ax.add_feature(cfeature.LAND, facecolor="lightgray")
        ax.add_feature(cfeature.BORDERS, linewidth=0.5)
    else:
        # Cartopy ÎØ∏ÏÇ¨Ïö© ÌèâÎ©¥ ÎåÄÏ≤¥ (ÌôòÍ≤Ω Ìò∏Ìôò Î™®Îìú)
        fig, ax = plt.subplots(figsize=(9, 6))
        im = da.plot.pcolormesh(
            ax=ax, x="lon", y="lat",
            cmap="YlOrRd", norm=norm, add_colorbar=False
        )
        ax.set_xlim(extent[0], extent[1])
        ax.set_ylim(extent[2], extent[3])
        ax.set_xlabel("Í≤ΩÎèÑ")
        ax.set_ylabel("ÏúÑÎèÑ")
        ax.grid(alpha=0.25)
        st.info("ÏßÄÎèÑÍ∞Ä Í∞ÑÏÜåÌôîÎêú ÌèâÎ©¥ Î™®ÎìúÎ°ú ÌëúÏãúÎêòÏóàÏäµÎãàÎã§ (Cartopy ÎØ∏ÏÇ¨Ïö©).", icon="‚ÑπÔ∏è")

    cbar = fig.colorbar(im, ax=ax, orientation="vertical", pad=0.05)
    cbar.set_label("Ìï¥ÏàòÎ©¥ Ïò®ÎèÑ (‚ÑÉ)")
    ax.set_title(f"Ìï¥ÏàòÎ©¥ Ïò®ÎèÑ: {date.strftime('%Y-%m-%d')}")
    return fig

# -------------------------------------------------
# ÎØ∏Îãà Ï∞®Ìä∏ Ïú†Ìã∏ (Bullet / Lollipop / Combo / Waffle)
# -------------------------------------------------
def bullet(ax, value, target, label="", color="#F28E2B"):
    lo, hi = min(value, target), max(value, target)
    pad = (hi - lo) * 0.5 + 0.5
    vmin, vmax = lo - pad, hi + pad
    ax.barh([0], [vmax - vmin], left=vmin, color="#EEEEEE", height=0.36)
    ax.barh([0], [value - vmin], left=vmin, color=color, height=0.36)
    ax.axvline(target, color="#333333", lw=2.2)
    ax.set_yticks([]); ax.set_xlim(vmin, vmax); ax.set_xlabel("‚ÑÉ"); ax.set_title(label)
    delta = value - target
    badge = f"+{delta:.1f}‚ÑÉ" if delta >= 0 else f"{delta:.1f}‚ÑÉ"
    ax.text(value, 0.1, f"{value:.1f}‚ÑÉ", ha="left", va="bottom", weight="bold", path_effects=PE)
    ax.text(0.02, 0.9, badge, transform=ax.transAxes,
            fontsize=12, weight="bold", color="white", path_effects=PE,
            bbox=dict(boxstyle="round,pad=0.35",
                      facecolor="#C1272D" if delta>=0 else "#2B7A78",
                      edgecolor="none"))

def lollipop_horizontal(ax, labels, values, title, unit="‚ÑÉ", color="#4C78A8", highlight_color="#E45756"):
    idx = np.argsort(values)[::-1]
    labels_sorted = [labels[i] for i in idx]
    values_sorted = [values[i] for i in idx]
    y = np.arange(len(labels_sorted))
    ax.hlines(y, [0]*len(values_sorted), values_sorted, color="#CCCCCC", lw=3)
    vmax_i = int(np.argmax(values_sorted))
    for i, v in enumerate(values_sorted):
        col = highlight_color if i == vmax_i else color
        ax.plot(v, y[i], "o", ms=10, mfc=col, mec=col)
        ax.text(v + max(values_sorted)*0.03, y[i],
                f"{v:.2f}{unit}" if unit.endswith("ÎÖÑ") else f"{v:.1f}{unit}",
                va="center", weight="bold" if i == vmax_i else 500, color=col, path_effects=PE)
    ax.set_yticks(y, labels_sorted); ax.set_xlabel(unit); ax.set_title(title); ax.grid(axis="x", alpha=0.25)

def combo_bar_line(ax, x_labels, bars, line, bar_color="#FDB863", line_color="#C1272D"):
    x = np.arange(len(x_labels))
    ax.bar(x, bars, color=bar_color, width=0.55)
    ax.set_xticks(x, x_labels); ax.set_ylabel("Ï¥ù ÌôòÏûê Ïàò(Î™Ö)")
    ax2 = ax.twinx()
    ax2.plot(x, line, marker="o", ms=7, lw=2.5, color=line_color)
    ax2.set_ylabel("Ï¥ù ÏÇ¨ÎßùÏûê Ïàò(Î™Ö)", color=line_color)

def waffle(ax, percent, rows=10, cols=10, on="#F03B20", off="#EEEEEE", title=None):
    total = rows*cols
    k = int(round(percent/100*total))
    for i in range(total):
        r = i // cols; c = i % cols
        color = on if i < k else off
        rect = patches.Rectangle((c, rows-1-r), 0.95, 0.95, facecolor=color, edgecolor="white")
        ax.add_patch(rect)
    ax.set_xlim(0, cols); ax.set_ylim(0, rows); ax.axis("off")
    if title: ax.set_title(title)
    ax.text(cols/2, rows/2, f"{percent:.0f}%", ha="center", va="center",
            fontsize=20, weight="bold", color="#333", path_effects=PE)

# -------------------------------------------------
# Î≥∏Î¨∏ UI
# -------------------------------------------------
st.title("üåä Îú®Í±∞ÏõåÏßÄÎäî ÏßÄÍµ¨: Ìï¥ÏàòÎ©¥ Ïò®ÎèÑ ÏÉÅÏäπÏù¥ Í≥†Îì±ÌïôÏÉùÏóêÍ≤å ÎØ∏ÏπòÎäî ÏòÅÌñ•")

st.header("I. ÏÑúÎ°†: Îú®Í±∞ÏõåÏßÄÎäî Î∞îÎã§, ÏúÑÌòëÎ∞õÎäî ÍµêÏã§")
st.markdown("""
ÌïúÎ∞òÎèÑÎäî ÏßÄÍµ¨ ÌèâÍ∑†Î≥¥Îã§ 2~3Î∞∞ Îπ†Î•∏ Ìï¥ÏàòÎ©¥ Ïò®ÎèÑ ÏÉÅÏäπÏùÑ Í≤™Í≥† ÏûàÏúºÎ©∞, Ïù¥Îäî Îçî Ïù¥ÏÉÅ Ï∂îÏÉÅÏ†ÅÏù∏ ÌôòÍ≤Ω Î¨∏Ï†úÍ∞Ä ÏïÑÎãàÎùº
ÎØ∏Îûò ÏÑ∏ÎåÄÏùò ÌïôÏäµÍ∂åÍ≥º Í±¥Í∞ïÏùÑ ÏßÅÏ†ëÏ†ÅÏúºÎ°ú ÏúÑÌòëÌïòÎäî ÌòÑÏã§ÏûÖÎãàÎã§. Î≥∏ Î≥¥Í≥†ÏÑúÎäî Í≥†Îì±ÌïôÏÉùÏùÑ Í∏∞ÌõÑ ÏúÑÍ∏∞Ïùò Í∞ÄÏû• Ï∑®ÏïΩÌïú ÏßëÎã®Ïù¥Ïûê
Î≥ÄÌôîÏùò ÌïµÏã¨ ÎèôÎ†•ÏúºÎ°ú Ï°∞Î™ÖÌïòÎ©∞, Ìï¥ÏàòÎ©¥ Ïò®ÎèÑ(SST) ÏÉÅÏäπÏùò Ïã§ÌÉúÏôÄ ÌååÍ∏âÌö®Í≥ºÎ•º Îã§Í∞ÅÎèÑÎ°ú Î∂ÑÏÑùÌï©ÎãàÎã§.
""")

st.header("II. Ï°∞ÏÇ¨ Í≥ÑÌöç")
st.subheader("1) Ï°∞ÏÇ¨ Í∏∞Í∞Ñ")
st.markdown("2025ÎÖÑ 7Ïõî ~ 2025ÎÖÑ 8Ïõî")
st.subheader("2) Ï°∞ÏÇ¨ Î∞©Î≤ïÍ≥º ÎåÄÏÉÅ")
st.markdown("""
- **Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù**: NOAA OISST v2 High Resolution Dataset  
- **Î¨∏Ìóå Ï°∞ÏÇ¨**: Í∏∞ÏÉÅÏ≤≠, Ïó∞Íµ¨ ÎÖºÎ¨∏, Î≥¥ÎèÑÏûêÎ£å Îì±  
- **ÎåÄÏÉÅ**: ÎåÄÌïúÎØºÍµ≠ Í≥†Îì±ÌïôÏÉùÏùò Í±¥Í∞ï¬∑ÌïôÏóÖ¬∑ÏÇ¨ÌöåÍ≤ΩÏ†úÏ†Å ÏòÅÌñ•
""")

st.header("III. Ï°∞ÏÇ¨ Í≤∞Í≥º")
st.subheader("1) ÌïúÎ∞òÎèÑ Ï£ºÎ≥Ä Ìï¥ÏàòÎ©¥ Ïò®ÎèÑ ÏÉÅÌô©")

# ÎÇ†Ïßú Í∏∞Î≥∏Í∞í: Îß§Ïö∞ ÏµúÏã†ÏùÄ Í≥µÎûÄÏùº Ïàò ÏûàÏúºÎØÄÎ°ú D-2
today = datetime.date.today()
default_date = min(today - datetime.timedelta(days=2), today)  # ÎØ∏Îûò ÏÑ†ÌÉù Î∞©ÏßÄ
date = st.date_input("ÎÇ†Ïßú ÏÑ†ÌÉù", value=default_date, max_value=today)

with st.spinner("Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Îäî Ï§ë..."):
    da, used_date = load_sst(date)

if da is not None:
    st.pyplot(plot_sst(da, used_date), clear_figure=True)
    if used_date != date:
        st.caption(f"ÏÑ†ÌÉù ÎÇ†ÏßúÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥ **{used_date.strftime('%Y-%m-%d')}** ÏûêÎ£åÎ°ú ÎåÄÏ≤¥ÌñàÏäµÎãàÎã§.")
else:
    st.warning("Ìï¥Îãπ Í∏∞Í∞ÑÏóê Ïú†Ìö®Ìïú Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏßÄ Î™ªÌñàÏäµÎãàÎã§. ÎÇ†ÏßúÎ•º Î∞îÍøîÎ≥¥ÏÑ∏Ïöî.")

# ----------------------- Ïù∏Ìè¨ Ï∞®Ìä∏Îì§ -----------------------
st.subheader("üìà ÏµúÍ∑º Í∏∞Î°ùÍ≥º ÌèâÎÖÑ ÎåÄÎπÑ Ìé∏Ï∞® (ÏòàÏãú)")
c1, c2, c3 = st.columns(3)
with c1:
    fig, ax = plt.subplots(figsize=(5,2.6))
    bullet(ax, 23.2, 21.2, label="2024-10 vs ÏµúÍ∑º10ÎÖÑ")
    st.pyplot(fig, clear_figure=True)
with c2:
    fig, ax = plt.subplots(figsize=(5,2.6))
    bullet(ax, 19.8, 19.2, label="2023 Ïó∞ÌèâÍ∑† vs 2001‚Äì2020", color="#2E86AB")
    st.pyplot(fig, clear_figure=True)
with c3:
    fig, ax = plt.subplots(figsize=(5,2.6))
    bullet(ax, 22.6, 22.6-2.8, label="ÏÑúÌï¥ 2024-10 vs ÏµúÍ∑º10ÎÖÑ", color="#E67E22")
    st.pyplot(fig, clear_figure=True)

st.subheader("üìä Ìï¥Ïó≠Î≥Ñ Ïû•¬∑Îã®Í∏∞ ÏÉÅÏäπÍ≥º Ìé∏Ï∞® (ÏòàÏãú)")
regions = ["ÎèôÌï¥", "ÏÑúÌï¥", "ÎÇ®Ìï¥"]
rise_1968_2008 = [1.39, 1.23, 1.27]
rate_since_2010 = [0.36, 0.54, 0.38]
anom_2024 = [3.4, 2.8, 1.1]
cL1, cL2, cL3 = st.columns(3)
with cL1:
    fig, ax = plt.subplots(figsize=(4.8,3))
    lollipop_horizontal(ax, regions, rise_1968_2008, title="Ïû•Í∏∞ ÏÉÅÏäπÌè≠ (1968‚Äì2008)", unit="‚ÑÉ")
    st.pyplot(fig, clear_figure=True)
with cL2:
    fig, ax = plt.subplots(figsize=(4.8,3))
    lollipop_horizontal(ax, regions, rate_since_2010, title="Ïó∞ÌèâÍ∑† ÏÉÅÏäπÎ•† (2010~)", unit="‚ÑÉ/ÎÖÑ", color="#59A14F")
    st.pyplot(fig, clear_figure=True)
with cL3:
    fig, ax = plt.subplots(figsize=(4.8,3))
    lollipop_horizontal(ax, regions, anom_2024, title="2024 Ìé∏Ï∞®", unit="‚ÑÉ", color="#F28E2B")
    st.pyplot(fig, clear_figure=True)

st.subheader("2) ÏßÄÍµ¨Ïóê ÎØ∏ÏπòÎäî ÏòÅÌñ•: Í∑πÎã®Ï†Å Í∏∞ÏÉÅ ÌòÑÏÉÅÏùò Ïã¨Ìôî")
st.markdown("""
Ìï¥ÏàòÎ©¥ Ïò®ÎèÑ ÏÉÅÏäπÏùÄ ÎåÄÍ∏∞ÏôÄ ÏÉÅÌò∏ÏûëÏö©ÌïòÎ©∞ ÏßÄÍµ¨ Ï†ÑÏ≤¥Ïùò Í∏∞ÏÉÅ ÏãúÏä§ÌÖúÏùÑ ÍµêÎûÄÌï©ÎãàÎã§.
- **Îçî Í∞ïÎ†•Ìïú ÌÉúÌíç**: Îî∞ÎúªÌïú Î∞îÎã§Îäî ÌÉúÌíçÏóê Îçî ÎßéÏùÄ ÏóêÎÑàÏßÄÎ•º Í≥µÍ∏âÌï©ÎãàÎã§.
- **ÏßëÏ§ëÌò∏Ïö∞ ÎπàÎ∞ú**: Í∏∞Ïò®Ïù¥ 1‚ÑÉ Ïò§Î•¥Î©¥ ÎåÄÍ∏∞Í∞Ä Î®∏Í∏àÏùÑ Ïàò ÏûàÎäî ÏàòÏ¶ùÍ∏∞ÎüâÏùÄ ÏïΩ 7% Ï¶ùÍ∞ÄÌï©ÎãàÎã§.
- **ÌòπÎèÖÌïú Ìè≠Ïóº**: Ïó¥Îèî(Heat Dome) ÌòÑÏÉÅÏúºÎ°ú Ìè≠ÏóºÏù¥ Ïû•Í∏∞ÌôîÎê©ÎãàÎã§.
""")

temps2 = np.arange(0, 6)  # 0~5‚ÑÉ
humidity_increase = 7 * temps2
figH2, axH2 = plt.subplots(figsize=(7,4))
axH2.plot(temps2, humidity_increase, lw=3, marker="o")
axH2.fill_between(temps2, humidity_increase, alpha=0.2)
axH2.set_xlabel("Í∏∞Ïò® ÏÉÅÏäπ (‚ÑÉ)")
axH2.set_ylabel("ÎåÄÍ∏∞ ÏàòÏ¶ùÍ∏∞Îüâ Ï¶ùÍ∞ÄÏú® (%)")
axH2.set_title("Í∏∞Ïò® ÏÉÅÏäπÏóê Îî∞Î•∏ ÎåÄÍ∏∞ ÏàòÏ¶ùÍ∏∞Îüâ Ï¶ùÍ∞Ä")
for t, v in {1:7,2:14,3:21,4:28,5:35}.items():
    axH2.scatter(t, v, zorder=5)
    axH2.annotate(f"+{v:.0f}%", (t, v), textcoords="offset points", xytext=(0,10), ha="center", weight="bold")
st.pyplot(figH2, clear_figure=True)

st.subheader("3) Í≥†Îì±ÌïôÏÉùÏóêÍ≤å ÎØ∏ÏπòÎäî ÏòÅÌñ• (ÏòàÏãú)")
st.markdown("**Í∏∞Ïò® ÏÉÅÏäπ ‚Üí ÌïôÏóÖ ÏÑ±Ï∑®ÎèÑ Í∞êÏÜå** (NBER Ïó∞Íµ¨ ÏöîÏßÄ Ïù∏Ïö©)")

temps = np.arange(0, 6)
impact = 100 - (1.8 * temps)  # 1‚ÑÉ Îãπ -1.8%
figC, axC = plt.subplots(figsize=(7,4))
axC.bar(temps, impact, alpha=0.7, label="Íµ¨Í∞ÑÎ≥Ñ ÌïôÏóÖ ÏÑ±Ï∑®ÎèÑ")
axC.plot(temps, impact, marker="o", lw=2.5, label="Ï∂îÏÑ∏ÏÑ† (1‚ÑÉ Îãπ -1.8%)")
axC.set_xlabel("Í∏∞Ïò® ÏÉÅÏäπ (‚ÑÉ)")
axC.set_ylabel("ÌïôÏóÖ ÏÑ±Ï∑®ÎèÑ (%)")
axC.set_title("Í∏∞Ïò® ÏÉÅÏäπÏù¥ ÌïôÏóÖ ÏÑ±Ï∑®ÎèÑÏóê ÎØ∏ÏπòÎäî ÏòÅÌñ•")
axC.set_ylim(80, 102)
for t, v in zip(temps, impact):
    axC.text(t, v+0.5, f"{v:.1f}%", ha="center", va="bottom", fontsize=9)
axC.legend()
st.pyplot(figC, clear_figure=True)

st.markdown("**Ïã†Ï≤¥¬∑Ï†ïÏã† Í±¥Í∞ï** (ÏòàÏãú ÏàòÏπò)")
years = ["2022ÎÖÑ", "2023ÎÖÑ", "2024ÎÖÑ"]
patients = [1564, 2818, 3704]
deaths = [9, 32, 34]
figM, axM = plt.subplots(figsize=(8, 3.6))
combo_bar_line(axM, years, patients, deaths)
axM.set_title("Ïò®Ïó¥ÏßàÌôò ÌôòÏûê¬∑ÏÇ¨Îßù Ï∂îÏù¥")
st.pyplot(figM, clear_figure=True)

cwa, cwb = st.columns(2)
with cwa:
    figW1, axW1 = plt.subplots(figsize=(4.2, 4.2))
    waffle(axW1, 59, title="Í∏∞ÌõÑÎ≥ÄÌôîÎ•º Îß§Ïö∞/Í∑πÎèÑÎ°ú Ïö∞Î†§")
    st.pyplot(figW1, clear_figure=True)
with cwb:
    figW2, axW2 = plt.subplots(figsize=(4.2, 4.2))
    waffle(axW2, 45, title="ÏùºÏÉÅÏóê Î∂ÄÏ†ïÏ†Å ÏòÅÌñ•ÏùÑ Î∞õÏùå")
    st.pyplot(figW2, clear_figure=True)


st.subheader("4) ÎåÄÏùëÍ≥º ÎØ∏Îûò ÏÑ∏ÎåÄÎ•º ÏúÑÌïú Ï†úÏñ∏")
st.markdown("""
- **Ï†ïÏ±Ö**: Î™®Îì† ÌïôÍµêÏóê ÎÉâÎ∞© Î∞è ÌôòÍ∏∞ ÏãúÏä§ÌÖúÏùÑ ÌòÑÎåÄÌôîÌïòÍ≥†, Í∏∞ÌõÑ Î≥ÄÌôîÏóê Îî∞Î•∏ Ï≤≠ÏÜåÎÖÑ Í±¥Í∞ï ÏòÅÌñ•ÏùÑ Ï∂îÏ†ÅÌïòÎäî ÏÑ∏Î∂ÑÌôîÎêú ÌÜµÍ≥ÑÎ•º Íµ¨Ï∂ïÌï¥Ïïº Ìï©ÎãàÎã§.
- **ÍµêÏú°**: Í∏∞ÌõÑÎ≥ÄÌôîÎ•º Ï†ïÍ∑ú ÍµêÍ≥ºÎ™©ÏúºÎ°ú Ìé∏ÏÑ±ÌïòÍ≥†, Î¨∏Ï†ú Ìï¥Í≤∞ Ï§ëÏã¨Ïùò ÌîÑÎ°úÏ†ùÌä∏ Í∏∞Î∞ò ÌïôÏäµÏùÑ ÌôïÎåÄÌï¥Ïïº Ìï©ÎãàÎã§. ÎòêÌïú, 'Í∏∞ÌõÑÌÖåÌÅ¨'ÏôÄ Í∞ôÏùÄ ÏÉàÎ°úÏö¥ ÏßÑÎ°ú Î∂ÑÏïºÏóê ÎåÄÌïú ÏßÄÎèÑÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.
- **Ï≤≠ÏÜåÎÖÑ ÌñâÎèô**: ÌîåÎùºÏä§Ìã± Ï†ÄÍ∞ê Ï∫†ÌéòÏù∏, Í∏∞ÌõÑÌñâÎèô ÏÜåÏÜ° Ï∞∏Ïó¨, ÏßÄÏó≠ÏÇ¨Ìöå ÌôòÍ≤Ω Î¨∏Ï†ú Ìï¥Í≤∞ Îì± Ï≤≠ÏÜåÎÖÑÏù¥ Ï£ºÎèÑÌïòÎäî Í∏∞ÌõÑ ÌñâÎèôÏùÑ Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú ÏßÄÏõêÌïòÍ≥† ÌôïÏÇ∞Ìï¥Ïïº Ìï©ÎãàÎã§.
""")

# --- Í≤∞Î°† Î∞è Ï∞∏Í≥† ÏûêÎ£å ---
st.header("IV. Í≤∞Î°†")
st.markdown("""
ÎåÄÌïúÎØºÍµ≠ Ï£ºÎ≥Ä Ìï¥ÏàòÎ©¥ Ïò®ÎèÑÏùò ÏÉÅÏäπÏùÄ Îã®ÏàúÌïú Ìï¥Ïñë Î¨∏Ï†úÍ∞Ä ÏïÑÎãàÎùº,  
Í≥†Îì±ÌïôÏÉùÎì§Ïùò Í±¥Í∞ï¬∑ÌïôÏóÖ¬∑ÏÉùÌôú Ï†ÑÎ∞òÏùÑ ÏúÑÌòëÌïòÎäî **Î≥µÌï© ÏúÑÍ∏∞**ÏûÖÎãàÎã§.  
Í∑∏Îü¨ÎÇò ÍµêÏú°Í≥º Ï≤≠ÏÜåÎÖÑ Ï£ºÎèÑÏùò Í∏∞ÌõÑ ÌñâÎèôÏùÑ ÌÜµÌï¥ Ïù¥ ÏúÑÍ∏∞Î•º Í∏∞ÌöåÎ°ú Ï†ÑÌôòÌï† Ïàò ÏûàÏäµÎãàÎã§.  
""")

st.header("V. Ï∞∏Í≥† ÏûêÎ£å")
st.markdown("""
- Goodman, J., & Park, R. J. (2018). *Heat and Learning*. NBER Working Paper.
- Hickman, C., et al. (2021). Climate anxiety in children and young people and their beliefs about government responses to climate change: a global survey. *The Lancet Planetary Health*.
- Í∏∞ÏÉÅÏ≤≠ Î≥¥ÎèÑÏûêÎ£å (2024)  
- ÌïúÍµ≠Ìï¥ÏñëÏàòÏÇ∞Í∞úÎ∞úÏõê Ïó∞Íµ¨Î≥¥Í≥†ÏÑú  
- Planet03 Ìï¥ÏñëÏó¥Ìåå Ïó∞Íµ¨ (2021)  
- Newstree, YTN Science Ïô∏ Í∏∞ÏÇ¨ Î∞è Ïó∞Íµ¨ÎÖºÎ¨∏  
""")

st.markdown(
    """
    <hr style='border:1px solid #ccc; margin-top:30px; margin-bottom:10px;'/>
    <div style='text-align: center; padding: 10px; color: gray; font-size: 0.9em;'>
        ÎØ∏Î¶ºÎßàÏù¥Ïä§ÌÑ∞Í≥†Îì±ÌïôÍµê 1ÌïôÎÖÑ 4Î∞ò 1Ï°∞ ¬∑ ÏßÄÏÜçÍ∞ÄÎä•ÌïúÏßÄÍµ¨ÏÇ¨ÎûëÌï¥Ï°∞
    </div>
    """,
    unsafe_allow_html=True
)